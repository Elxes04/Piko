name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            name: x86_64
            os: ubuntu-latest
          - target: aarch64-unknown-linux-gnu
            name: aarch64
            os: ubuntu-latest
          - target: i686-unknown-linux-gnu
            name: i686
            os: ubuntu-latest
          - target: armv7-unknown-linux-gnueabihf
            name: armv7
            os: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Create package directory
        run: |
          mkdir -p dist/${{ matrix.name }}
          cp target/${{ matrix.target }}/release/piko dist/${{ matrix.name }}/
          cp config/*.toml dist/${{ matrix.name }}/
          cp config/*.md dist/${{ matrix.name }}/
          cp README.md dist/${{ matrix.name }}/
          cp LICENSE dist/${{ matrix.name }}/

      - name: Create Debian package
        run: |
          cd dist/${{ matrix.name }}
          
          # Create package structure
          mkdir -p piko_0.2.1_${{ matrix.name }}/DEBIAN
          mkdir -p piko_0.2.1_${{ matrix.name }}/usr/bin
          mkdir -p piko_0.2.1_${{ matrix.name }}/usr/share/piko
          mkdir -p piko_0.2.1_${{ matrix.name }}/usr/share/doc/piko
          
          # Copy files
          cp piko piko_0.2.1_${{ matrix.name }}/usr/bin/
          cp *.toml piko_0.2.1_${{ matrix.name }}/usr/share/piko/
          cp *.md piko_0.2.1_${{ matrix.name }}/usr/share/doc/piko/
          cp README.md piko_0.2.1_${{ matrix.name }}/usr/share/doc/piko/
          cp LICENSE piko_0.2.1_${{ matrix.name }}/usr/share/doc/piko/copyright
          
          # Create control file
          cat > piko_0.2.1_${{ matrix.name }}/DEBIAN/control << 'EOF'
          Package: piko
          Version: 0.2.1
          Architecture: ${{ matrix.name }}
          Maintainer: Elxes04 <elxes04@example.com>
          Depends: libc6 (>= 2.31)
          Section: utils
          Priority: optional
          Homepage: https://github.com/Elxes04/piko
          Description: A minimal, customizable system information tool
           Piko is a lightweight and extensible command-line tool that gathers
           and displays system information in a customizable format.
           Inspired by Neofetch, it offers a clean and flexible way to view
           details about your system â€” from OS to CPU, memory, and more.
          EOF
          
          # Build package
          dpkg-deb --build piko_0.2.1_${{ matrix.name }} ../../

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: piko-${{ matrix.name }}
          path: |
            dist/${{ matrix.name }}/piko
            dist/${{ matrix.name }}/piko_0.2.1_${{ matrix.name }}.deb
          retention-days: 30

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/piko-x86_64/piko_0.2.1_x86_64.deb
            artifacts/piko-aarch64/piko_0.2.1_aarch64.deb
            artifacts/piko-i686/piko_0.2.1_i686.deb
            artifacts/piko-armv7/piko_0.2.1_armv7.deb
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  aur:
    name: Update AUR Package
    runs-on: ubuntu-latest
    needs: release
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update AUR package
        uses: kpcyrd/action-aur@v0.1.0
        with:
          pkgname: piko
          pkgbuild: |
            # Maintainer: Elxes04 <elxes04@example.com>
            pkgname=piko
            pkgver=0.2.1
            pkgrel=1
            pkgdesc="A minimal, customizable system information tool written in Rust"
            arch=('x86_64' 'aarch64' 'i686' 'armv7h')
            url="https://github.com/Elxes04/piko"
            license=('MIT')
            depends=('glibc')
            makedepends=('rust' 'cargo')
            source=("$pkgname-$pkgver.tar.gz::https://github.com/Elxes04/piko/archive/v$pkgver.tar.gz")
            sha256sums=('SKIP')

            build() {
                cd "$pkgname-$pkgver"
                cargo build --release
            }

            package() {
                cd "$pkgname-$pkgver"
                
                install -Dm755 "target/release/$pkgname" "$pkgdir/usr/bin/$pkgname"
                install -Dm644 LICENSE "$pkgdir/usr/share/licenses/$pkgname/LICENSE"
                install -Dm644 README.md "$pkgdir/usr/share/doc/$pkgname/README.md"
                
                # Install configuration files
                install -dm755 "$pkgdir/usr/share/$pkgname"
                install -m644 config/*.toml "$pkgdir/usr/share/$pkgname/"
                install -m644 config/*.md "$pkgdir/usr/share/$pkgname/"
            }
        env:
          AUR_TOKEN: ${{ secrets.AUR_TOKEN }}
